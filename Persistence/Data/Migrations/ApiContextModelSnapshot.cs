// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("categoria", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Abrigos"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Camisetas"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Pantalones"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DetallePedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdPedidoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdProductoFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPedidoFk");

                    b.HasIndex("IdProductoFk");

                    b.ToTable("detallePedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaPedido")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUsuarioFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuarioFk");

                    b.ToTable("pedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCategoriaFk")
                        .HasColumnType("int");

                    b.Property<string>("IdProducto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<double>("Precio")
                        .HasColumnType("Double");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoriaFk");

                    b.HasIndex("IdProducto")
                        .IsUnique();

                    b.ToTable("producto", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdCategoriaFk = 1,
                            IdProducto = "abrigo-01",
                            Imagen = "./img/abrigos/01.jpg",
                            Precio = 1000.0,
                            Titulo = "Abrigo 01"
                        },
                        new
                        {
                            Id = 2,
                            IdCategoriaFk = 1,
                            IdProducto = "abrigo-02",
                            Imagen = "./img/abrigos/02.jpg",
                            Precio = 1000.0,
                            Titulo = "Abrigo 02"
                        },
                        new
                        {
                            Id = 3,
                            IdCategoriaFk = 1,
                            IdProducto = "abrigo-03",
                            Imagen = "./img/abrigos/03.jpg",
                            Precio = 1000.0,
                            Titulo = "Abrigo 03"
                        },
                        new
                        {
                            Id = 4,
                            IdCategoriaFk = 1,
                            IdProducto = "abrigo-04",
                            Imagen = "./img/abrigos/04.jpg",
                            Precio = 1000.0,
                            Titulo = "Abrigo 04"
                        },
                        new
                        {
                            Id = 5,
                            IdCategoriaFk = 1,
                            IdProducto = "abrigo-05",
                            Imagen = "./img/abrigos/05.jpg",
                            Precio = 1000.0,
                            Titulo = "Abrigo 05"
                        },
                        new
                        {
                            Id = 6,
                            IdCategoriaFk = 2,
                            IdProducto = "camiseta-01",
                            Imagen = "./img/camisetas/01.jpg",
                            Precio = 1000.0,
                            Titulo = "Camiseta 01"
                        },
                        new
                        {
                            Id = 7,
                            IdCategoriaFk = 2,
                            IdProducto = "camiseta-02",
                            Imagen = "./img/camisetas/02.jpg",
                            Precio = 1000.0,
                            Titulo = "Camiseta 02"
                        },
                        new
                        {
                            Id = 8,
                            IdCategoriaFk = 2,
                            IdProducto = "camiseta-03",
                            Imagen = "./img/camisetas/03.jpg",
                            Precio = 1000.0,
                            Titulo = "Camiseta 03"
                        },
                        new
                        {
                            Id = 9,
                            IdCategoriaFk = 2,
                            IdProducto = "camiseta-04",
                            Imagen = "./img/camisetas/04.jpg",
                            Precio = 1000.0,
                            Titulo = "Camiseta 04"
                        },
                        new
                        {
                            Id = 10,
                            IdCategoriaFk = 2,
                            IdProducto = "camiseta-05",
                            Imagen = "./img/camisetas/05.jpg",
                            Precio = 1000.0,
                            Titulo = "Camiseta 05"
                        },
                        new
                        {
                            Id = 11,
                            IdCategoriaFk = 2,
                            IdProducto = "camiseta-06",
                            Imagen = "./img/camisetas/06.jpg",
                            Precio = 1000.0,
                            Titulo = "Camiseta 06"
                        },
                        new
                        {
                            Id = 12,
                            IdCategoriaFk = 2,
                            IdProducto = "camiseta-07",
                            Imagen = "./img/camisetas/07.jpg",
                            Precio = 1000.0,
                            Titulo = "Camiseta 07"
                        },
                        new
                        {
                            Id = 13,
                            IdCategoriaFk = 2,
                            IdProducto = "camiseta-08",
                            Imagen = "./img/camisetas/08.jpg",
                            Precio = 1000.0,
                            Titulo = "Camiseta 08"
                        },
                        new
                        {
                            Id = 14,
                            IdCategoriaFk = 3,
                            IdProducto = "pantalon-01",
                            Imagen = "./img/pantalones/01.jpg",
                            Precio = 1000.0,
                            Titulo = "Pantalón 01"
                        },
                        new
                        {
                            Id = 15,
                            IdCategoriaFk = 3,
                            IdProducto = "pantalon-02",
                            Imagen = "./img/pantalones/02.jpg",
                            Precio = 1000.0,
                            Titulo = "Pantalón 02"
                        },
                        new
                        {
                            Id = 16,
                            IdCategoriaFk = 3,
                            IdProducto = "pantalon-03",
                            Imagen = "./img/pantalones/03.jpg",
                            Precio = 1000.0,
                            Titulo = "Pantalón 03"
                        },
                        new
                        {
                            Id = 17,
                            IdCategoriaFk = 3,
                            IdProducto = "pantalon-04",
                            Imagen = "./img/pantalones/04.jpg",
                            Precio = 1000.0,
                            Titulo = "Pantalón 04"
                        },
                        new
                        {
                            Id = 18,
                            IdCategoriaFk = 3,
                            IdProducto = "pantalon-05",
                            Imagen = "./img/pantalones/05.jpg",
                            Precio = 1000.0,
                            Titulo = "Pantalón 05"
                        });
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokem", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Cliente"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("userRol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DetallePedido", b =>
                {
                    b.HasOne("Domain.Entities.Pedido", "Pedido")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("IdPedidoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Producto", "Producto")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("IdProductoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdUsuarioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.HasOne("Domain.Entities.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoriaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany("UsersRols")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Usuario")
                        .WithMany("UsersRols")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.Navigation("DetallePedidos");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Navigation("DetallePedidos");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("UsersRols");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Pedidos");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UsersRols");
                });
#pragma warning restore 612, 618
        }
    }
}
